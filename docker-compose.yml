version: '3.8'

services:
  # PostgreSQL Database - Optimized for API workloads
  db:
    image: postgres:15-alpine
    container_name: ${PROJECT_NAME:-api}_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-api_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-api_password}
      POSTGRES_DB: ${POSTGRES_DB:-api_db}
      # PostgreSQL performance optimizations
      POSTGRES_INITDB_ARGS: "--data-checksums --encoding=UTF8 --locale=en_US.utf8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    command: |
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=100
      -c shared_buffers=128MB
      -c effective_cache_size=512MB
      -c work_mem=4MB
      -c maintenance_work_mem=32MB
      -c random_page_cost=1.1
      -c seq_page_cost=1.0
      -c min_wal_size=1GB
      -c max_wal_size=2GB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=8MB
      -c default_statistics_target=100
      -c log_min_duration_statement=1000
      -c track_activities=on
      -c track_counts=on
      -c track_io_timing=on
      -c autovacuum=on
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -U ${POSTGRES_USER:-api_user} -d ${POSTGRES_DB:-api_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - api-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME:-api}_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - api-network
    profiles:
      - cache

  # Database Migration Service
  migration:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${ENVIRONMENT:-development}
      args:
        - ENVIRONMENT=${ENVIRONMENT:-development}
    container_name: ${PROJECT_NAME:-api}_migration
    environment:
      # Database
      POSTGRES_SERVER: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-api_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-api_password}
      POSTGRES_DB: ${POSTGRES_DB:-api_db}
      
      # Construct DATABASE_URL for Alembic
      DATABASE_URL: postgresql://${POSTGRES_USER:-api_user}:${POSTGRES_PASSWORD:-api_password}@db:5432/${POSTGRES_DB:-api_db}
    depends_on:
      db:
        condition: service_healthy
    command: python scripts/migrate.py
    networks:
      - api-network
    profiles:
      - migration

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: ${ENVIRONMENT:-development}
      args:
        - ENVIRONMENT=${ENVIRONMENT:-development}
    container_name: ${PROJECT_NAME:-api}_fastapi
    restart: unless-stopped
    environment:
      # Database
      POSTGRES_SERVER: db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${POSTGRES_USER:-api_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-api_password}
      POSTGRES_DB: ${POSTGRES_DB:-api_db}
      
      # Redis (optional)
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # API Configuration
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      BACKEND_CORS_ORIGINS: ${BACKEND_CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-development}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      DEBUG: ${DEBUG:-true}
      
      # Performance
      DATABASE_POOL_SIZE: ${DATABASE_POOL_SIZE:-10}
      DATABASE_MAX_OVERFLOW: ${DATABASE_MAX_OVERFLOW:-20}
      
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      migration:
        condition: service_completed_successfully
    volumes:
      - ./app:/app/app:ro
      - ./scripts:/app/scripts:ro
      - api_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - api-network

  # Database administration (optional, for development)
  adminer:
    image: adminer:latest
    container_name: ${PROJECT_NAME:-api}_adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
      ADMINER_DESIGN: pepa-linha
    depends_on:
      - db
    networks:
      - api-network
    profiles:
      - admin

networks:
  api-network:
    driver: bridge
    name: ${PROJECT_NAME:-api}_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local